---
permalink: /sw.js
layout: null
eleventyExcludeFromCollections: true
---
const PRECACHE = 'precache-{{ env.buildId }}';
const RUNTIME = 'runtime-{{ env.buildId }}';

// list of local resources to pre-cache
const PRECACHE_URLS = [
  './',
  './assets/css/main.css',
  './assets/js/barba.js',
  './assets/js/main.js',
  './offline/'
];

// install handler takes care of precaching resources
self.addEventListener('install', event => {
  async function() {
    const cache = await caches.open(PRECACHE);
    await cache.addAll(PRECACHE_URLS);
  }();
});

// activate handler takes care of cleaning up old caches
self.addEventListener('activate', event => {
  const currentCaches = [PRECACHE, RUNTIME];
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return cacheNames.filter(cacheName => !currentCaches.includes(cacheName));
    }).then(cachesToDelete => {
      return Promise.all(cachesToDelete.map(cacheToDelete => {
        return caches.delete(cacheToDelete);
      }));
    }).then(() => self.clients.claim())
  );
});

self.addEventListener('fetch', event => {
  const { request } = event;

  // always bypass for range requests, due to browser bugs
  if (request.headers.has('range')) return;

  // skip cross-origin requests, like those for Google Analytics.
  if (!request.url.startsWith(self.location.origin)) return;

  event.respondWith(async function() {
    // try to get from the cache:
    const cachedResponse = await caches.match(request);
    if (cachedResponse) return cachedResponse;

    try {
      // see https://developers.google.com/web/updates/2017/02/navigation-preload#using_the_preloaded_response
      const response = await event.preloadResponse;
      if (response) return response;

      // otherwise, get from network
      const cache = await caches.open(RUNTIME);
      return await fetch(request).then(response => {
        // put a copy of the response in the runtime cache.
        return cache.put(request, response.clone()).then(() => {
          return response;
        });
      });

    } catch (err) {
      // if this was a navigation, show the offline page:
      console.log('test');
      if (request.mode === 'navigate') {
        return caches.match('offline/');
      }

      // Otherwise throw
      throw err;
    }
  }());
});
